{
  tailLoop:   for (; ; ) {
    int tt=peekToken();
switch (tt) {
case Token.DOT:
case Token.DOTDOT:
{
        int memberTypeFlags;
        String s;
        consumeToken();
        decompiler.addToken(tt);
        memberTypeFlags=0;
        if (tt == Token.DOTDOT) {
          mustHaveXML();
          memberTypeFlags=Node.DESCENDANTS_FLAG;
        }
        if (!compilerEnv.isXmlAvailable()) {
          mustMatchToken(Token.NAME,"msg.no.name.after.dot");
          s=ts.getString();
          decompiler.addName(s);
          pn=nf.createPropertyGet(pn,null,s,memberTypeFlags);
          break;
        }
        tt=nextToken();
switch (tt) {
case Token.NAME:
          s=ts.getString();
        decompiler.addName(s);
      pn=propertyName(pn,s,memberTypeFlags);
    break;
case Token.MUL:
  decompiler.addName("*");
pn=propertyName(pn,"*",memberTypeFlags);
break;
case Token.XMLATTR:
decompiler.addToken(Token.XMLATTR);
pn=attributeAccess(pn,memberTypeFlags);
break;
default :
reportError("msg.no.name.after.dot");
}
}
break;
case Token.DOTQUERY:
consumeToken();
mustHaveXML();
decompiler.addToken(Token.DOTQUERY);
pn=nf.createDotQuery(pn,expr(false),ts.getLineno());
mustMatchToken(Token.RP,"msg.no.paren");
decompiler.addToken(Token.RP);
break;
case Token.LB:
consumeToken();
decompiler.addToken(Token.LB);
pn=nf.createElementGet(pn,null,expr(false),0);
mustMatchToken(Token.RB,"msg.no.bracket.index");
decompiler.addToken(Token.RB);
break;
case Token.LP:
if (!allowCallSyntax) {
break tailLoop;
}
consumeToken();
decompiler.addToken(Token.LP);
pn=nf.createCallOrNew(Token.CALL,pn);
argumentList(pn);
break;
default :
break tailLoop;
}
}
return pn;
}
