{
  int tt;
  tt=peekToken();
switch (tt) {
case Token.VOID:
case Token.NOT:
case Token.BITNOT:
case Token.TYPEOF:
    consumeToken();
  decompiler.addToken(tt);
return nf.createUnary(tt,unaryExpr());
case Token.ADD:
consumeToken();
decompiler.addToken(Token.POS);
return nf.createUnary(Token.POS,unaryExpr());
case Token.SUB:
consumeToken();
decompiler.addToken(Token.NEG);
return nf.createUnary(Token.NEG,unaryExpr());
case Token.INC:
case Token.DEC:
consumeToken();
decompiler.addToken(tt);
return nf.createIncDec(tt,false,memberExpr(true));
case Token.DELPROP:
consumeToken();
decompiler.addToken(Token.DELPROP);
return nf.createUnary(Token.DELPROP,unaryExpr());
case Token.ERROR:
consumeToken();
break;
case Token.LT:
if (compilerEnv.isXmlAvailable()) {
consumeToken();
Node pn=xmlInitializer();
return memberExprTail(true,pn);
}
default :
Node pn=memberExpr(true);
tt=peekTokenOrEOL();
if (tt == Token.INC || tt == Token.DEC) {
consumeToken();
decompiler.addToken(tt);
return nf.createIncDec(tt,true,pn);
}
return pn;
}
return nf.createName("err");
}
